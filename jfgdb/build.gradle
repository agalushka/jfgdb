import com.amazonaws.services.s3.transfer.*
import com.amazonaws.auth.*
import com.amazonaws.events.*


/*
 Java FileGeodatabase Thin driver
 */

description = """Rough ESRI File Geodatabase Java API"""

buildscript {
  repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    if (System.getProperty("java.class.version") >= "52") {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
       
    }
	classpath 'com.amazonaws:aws-java-sdk:1.10.56'
  }
}


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
if (System.getProperty("java.class.version") >= "52") {
    apply plugin: "jp.classmethod.aws.s3"

    aws {
      profileName = 'default'
      region = 'Ireland'
    }

}

compileJava {
	options.fork = true
	options.forkOptions.executable = 'javac'
	options.compilerArgs << '-XDignore.symbol.file'
	sourceCompatibility = 1.7
}

repositories {
	mavenLocal()
	maven { url "http://repo.maven.apache.org/maven2" }
}


uploadArchives {
    repositories {
            maven { 
                    url "s3://jfgdb/maven2"
                    if (project.hasProperty('s3accesskey') && project.hasProperty('s3accesskeySecret')) {
                        credentials(AwsCredentials) {
                            accessKey s3accesskey
                            secretKey s3accesskeySecret
                        }
                    }
            }
    }
}
dependencies {
	compile group: 'com.esri.geometry', name: 'esri-geometry-api', version:'1.2.1'
	compile group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy', version:'2.5.0'
	testCompile group: 'junit', name: 'junit', version:'4.11'
}


////////////////////////////////////////////////////////////////////////
// binaries management - sync binaries into S3 folder - download all libraries from S3



def rootMainResources = new File(project.buildDir , "/resources/main")
def rootOutputLibs = new File(rootMainResources, "sharedlibraries/" + project.version)
def outputlibsdir = new File(rootOutputLibs, "${System.getProperty('os.name')}/${System.getProperty('os.arch')}")
println "Output libs dir :$outputlibsdir"
if (!outputlibsdir.exists()) 
{
    outputlibsdir.mkdirs()
}

task copySharedLibsInResources << {
	
   copy { 
       into(outputlibsdir)
       from( "../nativewrapper/build/binaries/fGDBJNIWrapperSharedLibrary") 
           include("FGDB*.dll")
   }
   assert  System.getenv("ESRI_FILE_GDB_HOME") != null 
   assert  new File(System.getenv("ESRI_FILE_GDB_HOME")).exists()
   
   copy {
       into(outputlibsdir)     
       from( new File(System.getenv("ESRI_FILE_GDB_HOME") , "bin64")) 
           include("FileGDBAPI.dll")
           exclude("*.pdb")
           exclude("*D.dll")
       
   }

   copy {
   into(outputlibsdir)     
   from( System.getenv("ESRI_FILE_GDB_HOME") + "/lib") 
       include("*.so")
   
   }

   copy {
    into(rootMainResources)     
    from ("src/main/resources")  
        include("**/*/files")
    
   }
    /*
        we can't do it automatically, must be manual to solve
        dll loading dependencies

   doLast {
        String l = (outputlibsdir.listFiles().collect { it.name }).join(",")
        new File(outputlibsdir, "files").newWriter().write(l) 
   }
   */

}
if (System.getProperty("java.class.version") >= "52") {
	// sync only available on java 8
    task syncBinariesObjects(type: jp.classmethod.aws.gradle.s3.SyncTask) {
      bucketName 'jfgdb'
      source file(rootOutputLibs)
      prefix "sharedlibraries/${project.version}/"
    }
    syncBinariesObjects.dependsOn copySharedLibsInResources

   
}


task transfertPreparedBinaries() << {
	
				DefaultAWSCredentialsProviderChain credentialProviderChain = new DefaultAWSCredentialsProviderChain();
				TransferManager tx = new TransferManager(
							   credentialProviderChain.getCredentials());
	
				def r = tx.downloadDirectory("jfgdb","sharedlibraries/${project.version}", rootMainResources)
				print("downloading .");
				r.addProgressListener( [
					"progressChanged" : { e->
						print(".");
					}
				] as com.amazonaws.event.ProgressListener);
				
				r.waitForCompletion()
				println ""
				tx.shutdownNow()
	
		}
	
		processResources.dependsOn transfertPreparedBinaries
	
	


task createVersionPropertyFile << {
    def versionProp = new java.util.Properties()
    versionProp.setProperty("version", project.version)
    def resourcemain = new File(project.buildDir, "resources/main")
    resourcemain.mkdirs()
    versionProp.save(new FileOutputStream(new File(resourcemain,"fgdbversion.properties")), "jfgdbapi version")
}

compileJava.dependsOn copySharedLibsInResources
compileJava.dependsOn createVersionPropertyFile

